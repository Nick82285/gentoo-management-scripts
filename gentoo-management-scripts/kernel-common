#!/usr/bin/env bash

set -e
flags="-Wall -O3 -march=native -pipe"


get_latest_llvm() {

        llvms=($(ls "/usr/lib/llvm/"))

        IFS=$'\n'
        echo "${llvms[*]}" | sort -nr | head -n1
        IFS=''

}

export PATH="$PATH:/usr/lib/llvm/$(get_latest_llvm)/bin"
export LLVM=1
export LLVM_IAS=1
export INSTALL_MOD_STRIP=1
export KCFLAGS="${flags}"
export KCPPFLAGS="${flags}"
export LDFLAGS="-Wl,O1 -Wl,--as-needed"
export KBUILD_HOSTLDFLAGS="${LDFLAGS}"
export USERLDFLAGS="$LDFLAGS"
export CPUS=$(nproc)
export LOAD=$(( $CPUS + 1 ))

filloptions() {
        items=($(eselect kernel list | sed 1d | sed 's/\[.*\]//g;s/ \*/*/g' | xargs))
        itemcount=${#items[@]}

        for i in $(seq 0 $itemcount); do

                number=$(($i+1))

                if [[ $number -gt $itemcount ]]; then
                        break
                fi

                if [[ ${items[$i]} =~ \*$ ]]; then
                        finaloptions+="${number} $(echo ${items[$i]}) on "
                else
                        finaloptions+="${number} $(echo ${items[$i]}) off "
                fi
        done

        echo "$itemcount $finaloptions"
}

kernelselectdialog() {
        echo $(dialog --backtitle "Kernel Selection" --radiolist "Select Kernel:" 20 50 $(filloptions) --output-fd 1)
}

# this function is called when Ctrl-C is sent
function trap_ctrlc ()
{
    # perform cleanup here
    echo "Ctrl-C caught...performing clean up"
 
    echo "Doing cleanup"
    if [ -n "$oldgov" ]; then
    	cpupower frequency-set --governor "$oldgov"
    fi
    # exit shell script with error code 2
    # if omitted, shell script will continue execution
    exit 2
}
 
# initialise trap to call trap_ctrlc function
# when signal 2 (SIGINT) is received
trap "trap_ctrlc" 2
